<?php
/**
 * @var string $column
 * @var string $fieldMethod
 * @var string $returnSelf
 * @var bool $canBeNull
 * @var array $comparatorsIn
 */
?>
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>Equal(int $value) {
    return static::integerEqual('<?php echo $column;?>', $value);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>Not(int $value) {
    return static::integerNot('<?php echo $column;?>', $value);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>GreaterThan(int $value) {
    return static::integerGreaterThan('<?php echo $column;?>', $value);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>GreaterOrEqualThan(int $value) {
    return static::integerGreaterOrEqualThan('<?php echo $column;?>', $value);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>LowerThan(int $value) {
    return static::integerLowerThan('<?php echo $column;?>', $value);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>LowerOrEqualThan(int $value) {
    return static::integerLowerOrEqualThan('<?php echo $column;?>', $value);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>Between(int $from, int $to) {
    return static::integerBetween('<?php echo $column;?>', $from, $to);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>In(array $values) {
    return static::integerIn('<?php echo $column;?>', $values);
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>NotIn(array $values) {
    return static::integerNotIn('<?php echo $column;?>', $values);
}
<?php if($canBeNull): ?>
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>IsNull() {
    return static::isNull('<?php echo $column;?>');
}
/** @return <?php echo $returnSelf;?> */
public static function <?php echo $fieldMethod;?>IsNotNull() {
    return static::isNotNull('<?php echo $column;?>');
}
<?php endif; ?>

<?php foreach ($comparatorsIn as $comparatorName => $options): ?>
    <?php
    $c = count($options);
    if ($c === 0) {
        continue;
    }

    $singleMode = false;
    if ($c === 1) {
        $singleMode = true;
        $optionsText = implode(",", $options);

    } else {
        $optionsText = "[" .implode(",", $options) . "]";
    }
    ?>
    public static function <?php echo $fieldMethod;?>Is<?php echo ucfirst($comparatorName);?>() {
    <?php if ($singleMode): ?>
        return static::integerEqual('<?php echo $column;?>', <?php echo $optionsText; ?>);
    <?php else: ?>
        return static::integerIn('<?php echo $column;?>', <?php echo $optionsText; ?>);
    <?php endif; ?>
    }
    public static function <?php echo $fieldMethod;?>IsNot<?php echo ucfirst($comparatorName);?>() {
    <?php if ($singleMode): ?>
        return static::integerNot('<?php echo $column;?>', <?php echo $optionsText; ?>);
    <?php else: ?>
        return static::integerNotIn('<?php echo $column;?>', <?php echo $optionsText; ?>);
    <?php endif; ?>
    }
<?php endforeach; ?>